cmake_minimum_required(VERSION 3.6)
project(cpp_thread)

set(CMAKE_CXX_STANDARD 14)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_directories(include)

SET(PROJECT_LIBRARIES "")

MACRO(COLLECT_CC current_path)
    MESSAGE("-- CollectCC -- Searching for cc-files in ${current_path}")
    FILE(GLOB children RELATIVE ${current_path} ${current_path}/*)
    FOREACH(child ${children})
        IF(IS_DIRECTORY ${current_path}/${child})
            IF("${child}" STREQUAL ".cmake")
                MESSAGE("-- CollectCC -- Skipping .cmake directory")
            ELSEIF("${child}" STREQUAL ".git")
                MESSAGE("-- CollectCC -- Skipping .git directory")
            ELSEIF("${child}" STREQUAL ".idea")
                MESSAGE("-- CollectCC -- Skipping .idea directory")
            ELSEIF("${child}" STREQUAL "build")
                MESSAGE("-- CollectCC -- Skipping build directory")
            ELSE()
                COLLECT_CC(${current_path}/${child})
            ENDIF()
        ELSE ()
            GET_FILENAME_COMPONENT(file_ext ${current_path}/${child} EXT)
            GET_FILENAME_COMPONENT(file_name ${current_path}/${child} NAME_WE)
            IF ("${file_ext}" STREQUAL ".cc")
                ADD_LIBRARY(${file_name} ${current_path}/${child})
                SET(PROJECT_LIBRARIES ${PROJECT_LIBRARIES} ${file_name})
                MESSAGE("-- CollectCC -- Adding executable ${file_name} - done")
            ENDIF ()
        ENDIF()
    ENDFOREACH()
    MESSAGE("-- CollectCC -- Searching for cc-files in ${current_path} - done")
ENDMACRO()

COLLECT_CC(${CMAKE_CURRENT_SOURCE_DIR}/source)

FILE(GLOB_RECURSE PROJECT_TESTS ${CMAKE_CURRENT_SOURCE_DIR}/test/ **.cc)

ADD_EXECUTABLE(mainTest ${PROJECT_TESTS})
TARGET_LINK_LIBRARIES(mainTest ${PROJECT_LIBRARIES} gtest pthread)

